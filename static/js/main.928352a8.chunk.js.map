{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","visibleGoods","useState","isReversed","setReversed","NONE","sortType","setSortType","reoderedGoods","sort","prevGood","nextGood","LENGTH","length","ALPHABET","localeCompare","reverse","className","type","classNames","onClick","isReversing","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,mEAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAME,IAAME,EAAgB,WAC3B,IAAMC,EAAY,UAAOF,GACzB,EAAkCG,oBAAS,GAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASJ,EAASO,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAgBL,GAAcG,IAAaR,EAASO,KAkC1D,OAfAJ,EAAaQ,MAAK,SAACC,EAAUC,GAC3B,OAAQL,GACN,KAAKR,EAASc,OACZ,OAAOF,EAASG,OAASF,EAASE,OACpC,KAAKf,EAASgB,SACZ,OAAOJ,EAASK,cAAcJ,GAChC,QACE,OAAO,MAITR,GACFF,EAAae,UAIb,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYb,IAAaR,EAASgB,WAEtCM,QArCe,WACrBb,EAAYT,EAASgB,WA8BjB,iCAWA,wBACEI,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYb,IAAaR,EAASc,SAEtCQ,QA5Ca,WACnBb,EAAYT,EAASc,SAqCjB,4BAWA,wBACEM,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAahB,IAEjBiB,QA/Da,WACnBhB,GAAY,SAAAiB,GAAW,OAAKA,MAwDxB,qBAWCb,GACC,wBACEU,KAAK,SACLD,UAAU,8BAKVG,QAhEO,WACfb,EAAYT,EAASO,MACrBD,GAAY,IAuDN,sBAcJ,6BACGH,EAAaqB,KAAI,SAACC,GAAD,OAChB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YCjHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.928352a8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport const App: React.FC = () => {\n  const visibleGoods = [...goodsFromServer];\n  const [isReversed, setReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const reoderedGoods = isReversed || sortType !== SortType.NONE;\n\n  const reverseGoods = () => {\n    setReversed(isReversing => !isReversing);\n  };\n\n  const sortByAlphabet = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const resetAll = () => {\n    setSortType(SortType.NONE);\n    setReversed(false);\n  };\n\n  visibleGoods.sort((prevGood, nextGood): number => {\n    switch (sortType) {\n      case SortType.LENGTH:\n        return prevGood.length - nextGood.length;\n      case SortType.ALPHABET:\n        return prevGood.localeCompare(nextGood);\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={sortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={reverseGoods}\n        >\n          Reverse\n        </button>\n\n        {reoderedGoods && (\n          <button\n            type=\"button\"\n            className=\"\n              button\n              is-danger\n              is-light\n            \"\n            onClick={resetAll}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}